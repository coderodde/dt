
# The directory tagger (dt) stuff.
function remove_tag {
  if [ $# -eq 1 ]; then
    sed -i "/^[ ]*$1/d" ~/.dt/table
  fi
}

function dt {
  if [ "$#" -gt 0 ]; then
    if [ $1 = "-h" ] || [ $1 = "--help" ]; then
      
      echo "Usage: dt [OPTIONS] [TAG [PATH]]"
      echo "Options:"
      echo "  -a, --append  TAG PATH Creates a new tag TAG pointing to PATH."
      echo "  -p, --print   PATTERN  Searches for tags matching the pattern."
      echo "  -r, --remove  TAG1 ... TAGN Removes tags."
      echo "  -h, --help    print this text and exit."
      echo "  -v, --version print teh version and exit."

    elif [ $1 = "-v" ] || [ $1 = "--version" ]; then

      echo "dt 0.1.1"
    
    elif [ $1 = "-a" ] || [ $1 = "--append" ]; then
      
      if [ "$#" -ne 3 ]; then
        echo "Usage: dt -a | --append TAG PATH"
      else
        echo "$2 $3" >> ~/.dt/table
        echo "$2 maps to $3"
      fi
    
    elif [ $1 = "-p" ] || [ $1 = "--print" ]; then

      if [ $# -eq 1 ]; then
        # Print all non-empty lines of the table file.
        grep -v '^[[:space:]]*$' ~/.dt/table
      elif [ $# -eq 2 ]; then
        grep -i "^[[:space:]]*[[:alnum:]]*"$2 ~/.dt/table
      else
        echo "Usage: dt -p | --print [PATTERN]"
      fi

    elif [ $1 = "-r" ] || [ $1 = "--remove" ]; then
     
      if [ $# -lt 2 ]; then
        echo "Usage: dt -r | --remove TAG1 ... TAGN"
      else 
        for arg in "$@"
        do
          if [ $arg != $1 ]; then
            echo "Removing $arg!"
            remove_tag $1
          fi
        done
      fi
    else

      # Do switch
      echo $1 > ~/.dt/633.directory.tagger.tag.633
      . ~/.dt/dt_script
    fi
  
  else

    SAVE_DIR=$(pwd)
    echo "prev" > ~/.dt/633.directory.tagger.tag.633
    . ~/.dt/dt_script
    remove_tag "prev"
    echo "prev $SAVE_DIR" >> ~/.dt/table
  
  fi
}
